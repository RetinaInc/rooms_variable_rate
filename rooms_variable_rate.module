<?php

/**
 * @file
 * Hooks and API functions for Rooms Variable Rate module.
 */

include_once 'rooms_variable_rate.elements.inc';
include_once 'rooms_variable_rate.field.inc';

define('ROOMS_VARIABLE_RATE_DISCOUNT', 'discount');
define('ROOMS_VARIABLE_RATE_FLAT_RATE', 'flat_rate');
define('ROOMS_VARIABLE_RATE_FIELD_NAME', 'rooms_variable_rate');

/**
 * Implements hook_menu().
 */
function rooms_variable_rate_menu() {
  $items = array();

  // Edit unit access pricing management.
  $items['admin/rooms/units/unit/%rooms_unit/variable_rate'] = array(
    'title' => 'Manage Variable Pricing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rooms_variable_rate_pricing_form', 4),
    'access callback' => 'rooms_variable_rate_variable_pricing_access',
    'access arguments' => array('update pricing', 4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => '30',
    'file' => 'rooms_variable_rate.pages.inc',
  );

  return $items;
}


/**
 * Implements hook_menu_alter().
 */
function rooms_variable_rate_menu_alter(&$items) {
  // Override Bulk pricing management page callback.
  $items['admin/rooms/units/bulk_pricing_management']['page callback'] = 'rooms_variable_rate_bulk_pricing_management';
  $items['admin/rooms/units/bulk_pricing_management']['file'] = 'rooms_variable_rate.pages.inc';
  $items['admin/rooms/units/bulk_pricing_management']['file path'] = drupal_get_path('module', 'rooms_variable_rate');
  $items['admin/rooms/units/bulk_pricing_management']['module'] = 'rooms_variable_rate';
  // Change Pricing calendar output access callback.
  $items['rooms/units/unit/%rooms_unit/pricing/json/%/%']['access callback'] = 'rooms_variable_rate_default_pricing_access';
  // Change default Manage Pricing tab access callback.
  $items['admin/rooms/units/unit/%rooms_unit/pricing']['access callback'] = 'rooms_variable_rate_default_pricing_access';
}

/**
 * Access callback for managing pricing tab based on Rooms Variable Rate.
 *
 * @param string $operation
 *   The operation to perform.
 * @param RoomsUnit $unit
 *   The unit to perform the operation.
 *
 * @return bool
 *   If the user has access to the tab or not.
 */
function rooms_variable_rate_default_pricing_access($operation, $unit) {
  if (variable_get('rooms_variable_rate_disable_pricing_' . $unit->type, 0)) {
    return FALSE;
  }
  return rooms_unit_access($operation, $unit);
}

/**
 * Access callback for managing Variable Pricing tab.
 *
 * @param string $operation
 *   The operation to perform.
 * @param RoomsUnit $unit
 *   The unit to perform the operation.
 *
 * @return bool
 *   If the user has access to the tab or not.
 */
function rooms_variable_rate_variable_pricing_access($operation, $unit) {
  if (!variable_get('rooms_variable_rate_unit_' . $unit->type, 0)) {
    return FALSE;
  }
  return rooms_unit_access($operation, $unit);
}

/**
 * Implements hook_rooms_price_modifier_alter().
 */
function rooms_variable_rate_rooms_price_modifier_alter(&$price_modifiers, $booking_data) {
   global $_rooms_variable_rate_unit_price_modifiers;

  rules_invoke_all('rooms_variable_rate_modify_rate', $booking_data['unit'], $booking_data['start_date'], $booking_data['end_date']);

  if (isset($_rooms_variable_rate_unit_price_modifiers['#op_type'])) {
    $op_type = $_rooms_variable_rate_unit_price_modifiers['#op_type'];
    $amount = $_rooms_variable_rate_unit_price_modifiers['#amount'];

    $price_modifiers['temp'] = array (
     '#type' => ROOMS_DYNAMIC_MODIFIER,
     '#quantity' => 1,
     '#op_type' => $op_type,
     '#amount' => $amount,
    );
  }

  else {
    return;
  }
}

/**
 * Implements hook_rooms_string_alter().
 */
function rooms_variable_rate_rooms_string_alter(&$string_suggestions, $context) {
  $data = $context['#data'];

  // Get the default currency symbol.
  $c = commerce_currency_load();
  $currency = $c['symbol'];

  if ($context['#component'] == 'rooms_booking_manager' && $context['#purpose'] == 'rooms_create_line_item') {
    $unit = $data['unit'];
    if (isset($unit['price_log']['modifiers']['temp'])) {
      if ($unit['price_log']['modifiers']['temp']['dynamic_modifier']['modifier']['#op_type'] == ROOMS_DECREASE) {
        $modifier = $unit['price_log']['modifiers']['temp']['dynamic_modifier'];
        $discount = $modifier['modifier']['#amount'];
        $before_discount = $modifier['pre'];
        $string_suggestions[0] .= ' ' . t('(Includes !value% discount for booking length)',
            array('!value' => $discount, '@currency' => $currency, '@before_discount' =>  $before_discount));
      }
    }
    if (isset($unit['price_log']['modifiers']['temp'])) {
      if ($unit['price_log']['modifiers']['temp']['dynamic_modifier']['modifier']['#op_type'] == 'replace') {
        $modifier = $unit['price_log']['modifiers']['temp']['dynamic_modifier'];
        $discount = $modifier['modifier']['#amount'];
        $before_discount = $modifier['pre'];
        $string_suggestions[0] .= ' ' . t('(Includes @currency!value discount for booking length)',
            array('!value' => $discount, '@currency' => $currency, '@before_discount' =>  $before_discount));
      }
    }
  }
  elseif (($context['#component'] == 'book_unit_form_builder' || $context['#component'] == 'units_per_type_form')  && $context['#purpose'] == 'display_base_price') {
    // The unit level we are dealing with
    $units = $data['units'][$data['price']];
    // Pop a unit out to check the pricing level
    $unit = array_shift($units);
    if (isset($unit['price_log']['modifiers']['temp'])) {
      if ($unit['price_log']['modifiers']['temp']['dynamic_modifier']['modifier']['#op_type'] == ROOMS_DECREASE) {
        $modifier = $unit['price_log']['modifiers']['temp']['dynamic_modifier'];
        $discount = $modifier['modifier']['#amount'];
        $before_discount = $modifier['pre'];
        $string_suggestions[0] .= ' ' . t('(Includes <strong>!value% discount</strong> for booking length)',
            array('!value' => $discount, '@currency' => $currency, '@before_discount' =>  $before_discount));
      }
    }
    if (isset($unit['price_log']['modifiers']['temp'])) {
      if ($unit['price_log']['modifiers']['temp']['dynamic_modifier']['modifier']['#op_type'] == 'replace') {
        $modifier = $unit['price_log']['modifiers']['temp']['dynamic_modifier'];
        $discount = $modifier['modifier']['#amount'];
        $before_discount = $modifier['pre'];
        $string_suggestions[0] .= ' ' . t('(Includes @currency!value discount for booking length)',
            array('!value' => $discount, '@currency' => $currency, '@before_discount' =>  $before_discount));
      }
    }
  }
}

/**
 * Implements hook_features_pipe_COMPONENT_alter() for rooms_unit_type.
 */
function rooms_variable_rate_features_pipe_rooms_unit_type_alter(&$pipe, $data, $export) {
  if (!empty($data) && module_exists('strongarm')) {
    foreach ($data as $unit_type) {
      $pipe['variable'][] = 'rooms_variable_rate_unit_' . $unit_type;
      $pipe['variable'][] = 'rooms_variable_rate_disable_pricing_' . $unit_type;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for rooms_unit_edit_form().
 */
function rooms_variable_rate_form_rooms_unit_edit_form_alter(&$form, &$form_state) {
  if (isset($form[ROOMS_VARIABLE_RATE_FIELD_NAME])) {
    $form[ROOMS_VARIABLE_RATE_FIELD_NAME]['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for rooms_unit_type_form().
 */
function rooms_variable_rate_form_rooms_unit_type_form_alter(&$form, &$form_state, $form_id) {
  $unit_type = $form_state['rooms_unit_type'];
  // Unit availability information for administrators.
  $form['variable_rate'] = array(
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#title' => t('Rooms Variable Rate'),
    '#tree' => FALSE,
    '#weight' => 80,
    '#attributes' => array(
      'class' => array('unit-type-form-variable-rate'),
    ),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'rooms_variable_rate') . '/js/rooms_variable_rate_tab.js'),
    ),
  );

  $form['variable_rate']['rooms_variable_rate_per_unit'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable variable rate per unit'),
    '#default_value' => variable_get('rooms_variable_rate_unit_' . $unit_type->type, 0),
    '#description' => t('This will allow you to define variable pricing rates for each unit of this type. If you disable this feature, all stored data will be removed'),
  );

  $form['variable_rate']['rooms_variable_rate_disable_core_pricing'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable default Rooms pricing calendar'),
    '#default_value' => variable_get('rooms_variable_rate_disable_pricing_' . $unit_type->type, 0),
    '#description' => t('This will allow you to disable the default rooms
    pricing calendar and methods for units of this type. Only the base price
    will be taken into account'),
  );

  $form['#submit'][] = 'rooms_variable_rate_rooms_unit_type_form_submit';
}

/**
 * Custom submit handler for rooms_unit_type_form.
 */
function rooms_variable_rate_rooms_unit_type_form_submit($form, &$form_state) {
  $unit_type = $form_state['rooms_unit_type'];

  if (variable_get('rooms_variable_rate_unit_' . $unit_type->type, 0) == 0
    && $form_state['values']['rooms_variable_rate_per_unit'] == 1) {
    rooms_variable_rate_create_instance('rooms_unit', $unit_type->type);
  }
  elseif (variable_get('rooms_variable_rate_unit_' . $unit_type->type, 0) == 1
    && $form_state['values']['rooms_variable_rate_per_unit'] == 0) {
    field_delete_instance(array(
      'field_name' => ROOMS_VARIABLE_RATE_FIELD_NAME,
      'entity_type' => 'rooms_unit',
      'bundle' => $unit_type->type,
    ));
  }

  variable_set('menu_rebuild_needed', TRUE);
  variable_set('rooms_variable_rate_unit_' . $unit_type->type, $form_state['values']['rooms_variable_rate_per_unit']);
  variable_set('rooms_variable_rate_disable_pricing_' . $unit_type->type, $form_state['values']['rooms_variable_rate_disable_core_pricing']);
}
